{"version":3,"sources":["components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_key","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","style","width","margin","height","className","this","size","logo","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAqCeA,G,MAlCF,SAACC,GAIb,OAEC,6BAEG,iDACF,4EACA,iJAGA,0BAAMC,SAAUD,EAAME,YACrB,2BAAOC,KAAK,OAAOC,KAAM,OAAOC,YAAY,WAE5C,2BAAOF,KAAK,OAAOC,KAAM,UAAUC,YAAY,cAC9C,sDCAUC,EAjBC,SAACN,GAChB,OAEC,6BAGEA,EAAMO,MAAQ,qCAAWP,EAAMO,KAAjB,KACdP,EAAMQ,SAAW,wCAAcR,EAAMQ,SACrCR,EAAMS,aAAe,4CAAkBT,EAAMS,YAAxB,OACrBT,EAAMU,UAAa,yCAAeV,EAAMU,SAArB,MACnBV,EAAMW,aAAe,4CAAkBX,EAAMW,YAAxB,KACrBX,EAAMY,OAAS,2BAAIZ,EAAMY,MAAV,OCLbC,G,YAAU,oCA4GDC,E,2MA9FfC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAYK,EACZJ,WAAOI,G,EAGPd,W,sCAAY,WAAOe,GAAP,qBAAAC,EAAA,4DACVD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAHhC,SAIaC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJlB,cAIJW,EAJI,gBAMSA,EAASC,OANlB,OAMJC,EANI,OAQPnB,GAAQC,GACTmB,QAAQC,IAAIF,GAEd,EAAKG,SAAS,CACZpB,YAAciB,EAAKI,KAAKC,KACxBxB,KAAOmB,EAAKtB,KACZI,QAAUkB,EAAKM,IAAIxB,QACnBE,SAAWgB,EAAKI,KAAKpB,SACrBC,YAAce,EAAKO,QAAQ,GAAGtB,eAE7B,EAAKkB,SAAS,CACfpB,iBAAcO,EACdT,UAAOS,EACPR,aAAUQ,EACVN,cAAWM,EACXL,iBAAcK,EACdJ,MAAO,6CAxBC,0C,8HAqCZ,OAIE,yBAAKsB,MAAO,CAACC,MAAO,OAASC,OAAQ,OAAOC,OAAO,UAGnD,kBAAC,OAAD,CAAMC,UAAU,gBAKhB,kBAAC,EAAD,CAAMpC,WAAYqC,KAAKrC,aAGvB,kBAAC,EAAD,CAASO,YAAa8B,KAAKxB,MAAMN,YACzBF,KAAMgC,KAAKxB,MAAMR,KACjBC,QAAS+B,KAAKxB,MAAMP,QACpBE,SAAU6B,KAAKxB,MAAML,SACpBC,YAAa4B,KAAKxB,MAAMJ,YACvBC,MAAO2B,KAAKxB,MAAMH,SAK1B,kBAAC,SAAD,CAAQ4B,KAAK,QAEd,kBAAC,gBAAD,CAAerC,KAAK,OAAOsC,KAAK,aAG/B,kBAAC,iBAAD,KACI,uBAAGC,KAAK,uDAAR,eACA,uBAAGA,KAAK,6BAAR,qB,GAjFMC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAIR,kBAAC,EAAD,MAKAC,SAASC,eAAe,SDiHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3377f1f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Grid , Cell } from 'react-mdl';\r\n\r\nconst Form = (props) => {\r\n\r\n\r\n\r\n\treturn (\r\n\r\n\t\t<div> \r\n\t\t\t\r\n\t\t\t\t <h1> Weather Finder! </h1>\r\n\t\t\t<p> find out temperature conditions and more... </p>\r\n\t\t\t<p> enter the city name and country (ca , us , uk , etc).\r\n\t\t\t\tNote, country code has to be the internet domain extension.</p>\r\n\t\t\r\n\t\t\t<form onSubmit={props.getWeather}>\r\n\t\t\t\t<input type=\"text\" name= \"city\" placeholder=\"City..\" />\r\n\t\t\t\t\r\n\t\t\t\t<input type=\"text\" name= \"country\" placeholder=\"Country..\" />\r\n\t\t\t\t\t<button> Get Weather! </button>\r\n\t\t\t</form>\r\n\t\t\r\n\r\n\t\t\t\r\n\r\n\t\t\r\n\t\t</div>\r\n\r\n\r\n\t\t)\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n//stateless component (doesnt have to be a class1)\r\n// cant use '' anymore in props\r\nconst Weather = (props) => {\r\n\treturn(\r\n\t\t//one single div returned on return();\r\n\t\t<div> \r\n\r\n\r\n\t\t\t{props.city && <h1>city: {props.city} </h1>}\r\n\t\t\t{props.country && <h1>country: {props.country}</h1> }\r\n\t\t\t{props.temperature && <h1>temperature: {props.temperature} 'C</h1>}\r\n\t\t\t{props.humidity &&  <h1>humidity: {props.humidity} %</h1>}\r\n\t\t\t{props.description && <h2>description: {props.description} </h2>}\r\n\t\t\t{props.error && <p>{props.error} </p>}\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Weather;","import React, { Component } from \"react\";\nimport { Grid , Cell, Layout, Header, Footer, FooterSection, FooterLinkList } from 'react-mdl';\nimport './App.css';\n\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nconst API_key = '27151a3481ca6bf95bfcff58a1f7d7ab';\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}*/\n\n\nclass App extends Component {\n\n\nstate = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description:undefined,\n    error: undefined\n\n}   \n    getWeather= async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}&units=metric`);\n    \n      const data = await api_call.json();\n\n      if(city && country){\n        console.log(data);\n      \n      this.setState({\n        temperature : data.main.temp,\n        city : data.name,\n        country : data.sys.country,\n        humidity : data.main.humidity,\n        description : data.weather[0].description});\n      }else{\n         this.setState({\n        temperature : undefined,\n        city : undefined,\n        country : undefined,\n        humidity : undefined,\n        description : undefined,\n        error: 'pleaser enter a valid city and country  '});\n\n      }\n\n\n      \n\n    }\n\n\n\n  render(){\n\n    return (\n\n/* all info has to be in one div tag. */\n  \n      <div style={{width: '100%',  margin: 'auto',height:\"100vh\"}}> \n    \n\n      <Grid className=\"landing-grid\">\n\n      \n     \n     \n      <Form getWeather={this.getWeather}/>\n      \n      \n      <Weather temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n               description={this.state.description}\n                error={this.state.error} />\n                \n    \n                </Grid>\n    \n        <Footer size=\"mini\">\n\n       <FooterSection type=\"left\" logo=\"My Places\">\n       \n\n        <FooterLinkList >\n            <a href=\"https://www.linkedin.com/in/paritosh-arya-6bb45ba5/\">My Linkedin</a>\n            <a href=\"https://github.com/13pa22\">My Github</a>\n        </FooterLinkList>\n          </FooterSection>\n        </Footer>\n       </div>\n\n\n\n      )\n\n\n\n  }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n\n\n\t<App />, \n\n\n\n\n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}